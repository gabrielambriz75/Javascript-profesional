{"id":"ejercicios/proxy.html","dependencies":[{"name":"D:\\Angel\\source\\Repos\\Javascript-profesional\\package.json","includedInParent":true,"mtime":1642749196462}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Proxy</title>\r\n</head>\r\n\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n\r\n    <script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\r\n    <script>// Proxy es parecido a getters y setters\n// Usa un concepto que se llama traps: son interceptores de llamadas. A diferencia de getters, no opera sobre una propieda, si no sobre un objeto.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Methods_of_the_handler_object\n// Creemos un ejemplo donde interceptamos llamadas para leer una propiedad\n// Si la propiedad existe, la regresamos\n// Si no existe, entonces sugerimos una que pueda funcionar\n// Para eso eso vamos a usar un algoritmo que se llama Levenshtein. (window.Levenshtein.get)\n// Ejemplos de levenshtein distance (usa window.Levenshtein)\nvar target = {\n  red: 'Rojo',\n  green: 'Verde',\n  blue: 'Azul'\n};\nvar handler = {\n  get: function get(obj, prop) {\n    if (prop in obj) {\n      return obj[prop];\n    }\n\n    var suggestion = Object.keys(obj).find(function (key) {\n      return Levenshtein.get(key, prop) <= 3;\n    });\n\n    if (suggestion) {\n      console.log(\"\".concat(prop, \" no se encontr\\xF3. Quisiste decir \").concat(suggestion, \"?\"));\n    }\n\n    return obj[prop];\n  }\n};\nvar p = new Proxy(target, handler);</script>\r\n\r\n</body>\r\n\r\n</html>"},"sourceMaps":null,"error":null,"hash":"4a4255071409a2215b7f023030c256df","cacheData":{"env":{}}}